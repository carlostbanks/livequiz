import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { useNotification, useConfirmation } from '../components/NotificationSystem';

function QuestionsManagement() {
  const { topicId } = useParams();
  const navigate = useNavigate();
  
  const [topic, setTopic] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState({
    question_text: '',
    answer_text: ''
  });

  const { showSuccess, showError, NotificationContainer } = useNotification();
  const { confirm, ConfirmationModal } = useConfirmation();

  useEffect(() => {
    fetchTopicAndQuestions();
  }, [topicId]);

  const fetchTopicAndQuestions = async () => {
    try {
      // Fetch topic details
      const { data: topicData, error: topicError } = await supabase
        .from('topics')
        .select('*')
        .eq('id', topicId)
        .single();

      if (topicError) throw topicError;
      setTopic(topicData);

      // Fetch questions for this topic
      const { data: questionsData, error: questionsError } = await supabase
        .from('questions')
        .select('*')
        .eq('topic_id', topicId)
        .order('order_index');

      if (questionsError) throw questionsError;
      setQuestions(questionsData || []);

    } catch (error) {
      console.error('Error fetching data:', error);
      showError('Failed to load questions. Please try again.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setSaving(true);
      let finalAnswerText = formData.answer_text.trim();
      
      // If answer is blank, use AI to generate it
      if (!finalAnswerText && formData.question_text.trim()) {
        try {
          console.log('Generating AI answer for:', formData.question_text);
          
          const response = await fetch('http://localhost:3001/generate-answer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              question: formData.question_text.trim()
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            finalAnswerText = data.answer;
            console.log('AI generated answer:', finalAnswerText);
          } else {
            throw new Error('Failed to generate answer');
          }
        } catch (aiError) {
          console.error('Error generating AI answer:', aiError);
          showError('Could not generate answer automatically. Please provide an answer manually.');
          return;
        }
      }

      if (editingQuestion) {
        // Update existing question
        const { error } = await supabase
          .from('questions')
          .update({
            question_text: formData.question_text,
            answer_text: finalAnswerText
          })
          .eq('id', editingQuestion.id);

        if (error) throw error;
        showSuccess('Question updated successfully!');
      } else {
        // Create new question
        const { error } = await supabase
          .from('questions')
          .insert([{
            question_text: formData.question_text,
            answer_text: finalAnswerText,
            topic_id: topicId,
            order_index: questions.length + 1
          }]);

        if (error) throw error;
        showSuccess(`Question created successfully!${!formData.answer_text.trim() ? ' (Answer auto-generated by AI)' : ''}`);
      }

      // Reset form and close modal
      resetForm();
      fetchTopicAndQuestions(); // Refresh the list
    } catch (error) {
      console.error('Error saving question:', error);
      showError('Failed to save question. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const handleEdit = (question) => {
    setEditingQuestion(question);
    setFormData({
      question_text: question.question_text,
      answer_text: question.answer_text
    });
    setShowCreateModal(true);
  };

  const handleDelete = async (question) => {
    const confirmed = await confirm({
      title: 'Delete Question',
      message: `Are you sure you want to delete this question?`,
      confirmText: 'Delete',
      confirmVariant: 'danger'
    });

    if (!confirmed) return;

    try {
      // Delete the question
      const { error } = await supabase
        .from('questions')
        .delete()
        .eq('id', question.id);

      if (error) throw error;
      
      // Get remaining questions and renumber them
      const { data: remainingQuestions, error: fetchError } = await supabase
        .from('questions')
        .select('*')
        .eq('topic_id', topicId)
        .order('order_index');

      if (fetchError) throw fetchError;

      // Renumber all remaining questions sequentially
      for (let i = 0; i < remainingQuestions.length; i++) {
        const { error: updateError } = await supabase
          .from('questions')
          .update({ order_index: i + 1 })
          .eq('id', remainingQuestions[i].id);

        if (updateError) throw updateError;
      }
      
      showSuccess('Question deleted successfully!');
      fetchTopicAndQuestions(); // Refresh the list
    } catch (error) {
      console.error('Error deleting question:', error);
      showError('Failed to delete question. Please try again.');
    }
  };

  const resetForm = () => {
    setFormData({
      question_text: '',
      answer_text: ''
    });
    setEditingQuestion(null);
    setShowCreateModal(false);
  };

  const moveQuestion = async (questionId, direction) => {
    const questionIndex = questions.findIndex(q => q.id === questionId);
    if (questionIndex === -1) return;

    const newIndex = direction === 'up' ? questionIndex - 1 : questionIndex + 1;
    if (newIndex < 0 || newIndex >= questions.length) return;

    try {
      // Create a new array with the moved question
      const newQuestions = [...questions];
      const [movedQuestion] = newQuestions.splice(questionIndex, 1);
      newQuestions.splice(newIndex, 0, movedQuestion);

      // Update all order_index values to be sequential
      const updates = newQuestions.map((question, index) => ({
        id: question.id,
        order_index: index + 1
      }));

      // Update all questions in database
      for (const update of updates) {
        const { error } = await supabase
          .from('questions')
          .update({ order_index: update.order_index })
          .eq('id', update.id);

        if (error) throw error;
      }

      fetchTopicAndQuestions(); // Refresh to show new order
    } catch (error) {
      console.error('Error reordering questions:', error);
      showError('Failed to reorder questions. Please try again.');
    }
  };

  if (!topic) {
    return (
      <div className="container-fluid bg-light min-vh-100 py-5">
        <div className="container">
          <div className="row mb-4">
            <div className="col-12">
              <div className="d-flex justify-content-between align-items-center">
                <div>
                  <h1 className="display-6 fw-bold text-primary mb-1">
                    ❓ Questions Management
                  </h1>
                  <p className="text-muted">Topic not found</p>
                </div>
                <button 
                  className="btn btn-outline-secondary"
                  onClick={() => navigate('/admin/topics')}
                >
                  ← Back to Topics
                </button>
              </div>
            </div>
          </div>
          <div className="text-center">
            <div className="alert alert-danger">
              <h4>Topic not found</h4>
              <button className="btn btn-primary" onClick={() => navigate('/admin/topics')}>
                Back to Topics
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container-fluid bg-light min-vh-100 py-5">
      <div className="container">
        
        {/* Header */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="d-flex justify-content-between align-items-center">
              <div>
                <h1 className="display-6 fw-bold text-primary mb-1">
                  ❓ Questions: {topic.name}
                </h1>
                <p className="text-muted">Manage questions for this topic</p>
              </div>
              <div>
                <button 
                  className="btn btn-success me-2"
                  onClick={() => {
                    setFormData({
                      question_text: '',
                      answer_text: ''
                    });
                    setShowCreateModal(true);
                  }}
                >
                  + Add Question
                </button>
                <button 
                  className="btn btn-outline-secondary"
                  onClick={() => navigate('/admin/topics')}
                >
                  ← Back to Topics
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Questions List */}
        {questions.length === 0 ? (
          <div className="text-center py-5">
            <h3 className="text-muted mb-3">No questions created yet</h3>
            <p className="text-muted mb-4">Add your first question to get started!</p>
            <button 
              className="btn btn-success btn-lg"
              onClick={() => {
                setFormData({
                  question_text: '',
                  answer_text: ''
                });
                setShowCreateModal(true);
              }}
            >
              + Add First Question
            </button>
          </div>
        ) : (
          <div className="row">
            <div className="col-12">
              <div className="card border-0 shadow-sm">
                <div className="card-body p-0">
                  {questions.map((question, index) => (
                    <div key={question.id} className="border-bottom p-4" style={{
                      animation: `slideInUp 0.3s ease-out ${index * 0.1}s both`
                    }}>
                      <div className="row align-items-center">
                        
                        {/* Question Number & Reorder */}
                        <div className="col-md-1 text-center">
                          <div className="badge bg-primary mb-2">#{question.order_index}</div>
                          <div className="btn-group-vertical btn-group-sm">
                            <button 
                              className="btn btn-outline-secondary btn-sm"
                              onClick={() => moveQuestion(question.id, 'up')}
                              disabled={index === 0}
                            >
                              ↑
                            </button>
                            <button 
                              className="btn btn-outline-secondary btn-sm"
                              onClick={() => moveQuestion(question.id, 'down')}
                              disabled={index === questions.length - 1}
                            >
                              ↓
                            </button>
                          </div>
                        </div>

                        {/* Question Content */}
                        <div className="col-md-8">
                          <h6 className="fw-bold text-dark mb-2">Question:</h6>
                          <p className="mb-3">{question.question_text}</p>
                          <h6 className="fw-bold text-success mb-2">Expected Answer:</h6>
                          <p className="text-success mb-0">
                            <code>{question.answer_text}</code>
                          </p>
                        </div>

                        {/* Actions */}
                        <div className="col-md-3 text-end">
                          <div className="btn-group">
                            <button 
                              className="btn btn-outline-primary btn-sm"
                              onClick={() => handleEdit(question)}
                            >
                              Edit
                            </button>
                            <button 
                              className="btn btn-outline-danger btn-sm"
                              onClick={() => handleDelete(question)}
                            >
                              Delete
                            </button>
                          </div>
                        </div>

                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

      </div>

      {/* Create/Edit Question Modal */}
      {showCreateModal && (
        <div className="modal fade show d-block" style={{backgroundColor: 'rgba(0,0,0,0.5)'}}>
          <div className="modal-dialog modal-lg modal-dialog-centered">
            <div className="modal-content border-0 shadow-lg">
              <div className="modal-header border-0">
                <h5 className="modal-title fw-bold">
                  {editingQuestion ? 'Edit Question' : 'Add New Question'}
                </h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={resetForm}
                ></button>
              </div>
              <form onSubmit={handleSubmit}>
                <div className="modal-body">
                  
                  {/* Question Text */}
                  <div className="mb-3">
                    <label htmlFor="questionText" className="form-label fw-semibold">Question *</label>
                    <textarea
                      className="form-control"
                      id="questionText"
                      rows="3"
                      value={formData.question_text}
                      onChange={(e) => setFormData({...formData, question_text: e.target.value})}
                      required
                      placeholder="e.g., What keyword is used to declare a variable in JavaScript?"
                    ></textarea>
                  </div>

                  {/* Answer Text */}
                  <div className="mb-3">
                    <label htmlFor="answerText" className="form-label fw-semibold">Expected Answer</label>
                    <input
                      type="text"
                      className="form-control"
                      id="answerText"
                      value={formData.answer_text}
                      onChange={(e) => setFormData({...formData, answer_text: e.target.value})}
                      placeholder="Leave blank to auto-generate with AI"
                    />
                    {formData.answer_text.trim() ? (
                      <div className="form-text">
                        Custom answer provided. Students will need to match this exactly.
                      </div>
                    ) : (
                      <div className="form-text">
                        💡 <strong>Leave blank</strong> and AI will generate the correct answer automatically.
                      </div>
                    )}
                  </div>

                </div>
                <div className="modal-footer border-0">
                  <button 
                    type="button" 
                    className="btn btn-outline-secondary" 
                    onClick={resetForm}
                    disabled={saving}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={saving}
                  >
                    {saving ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                        {editingQuestion ? 'Updating...' : 'Creating...'}
                      </>
                    ) : (
                      editingQuestion ? 'Update Question' : 'Add Question'
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Notification System */}
      <NotificationContainer />
      <ConfirmationModal />

      {/* Custom Styles */}
      <style>{`
        @keyframes slideInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}

export default QuestionsManagement;