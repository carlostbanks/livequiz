import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { useNotification, useConfirmation } from '../components/NotificationSystem';

function QuestionsManagement() {
  const { topicId } = useParams();
  const navigate = useNavigate();
  
  const [topic, setTopic] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState({
    question_text: '',
    answer_text: ''
  });

  const { showSuccess, showError, NotificationContainer } = useNotification();
  const { confirm, ConfirmationModal } = useConfirmation();

  useEffect(() => {
    fetchTopicAndQuestions();
  }, [topicId]);

  const fetchTopicAndQuestions = async () => {
    setLoading(true);
    try {
      // Fetch topic details
      const { data: topicData, error: topicError } = await supabase
        .from('topics')
        .select('*')
        .eq('id', topicId)
        .single();

      if (topicError) throw topicError;
      setTopic(topicData);

      // Fetch questions for this topic
      const { data: questionsData, error: questionsError } = await supabase
        .from('questions')
        .select('*')
        .eq('topic_id', topicId)
        .order('order_index');

      if (questionsError) throw questionsError;
      setQuestions(questionsData || []);

    } catch (error) {
      console.error('Error fetching data:', error);
      showError('Failed to load questions. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setSaving(true);
      let finalAnswerText = formData.answer_text.trim();
      
      // If answer is blank, use AI to generate it
      if (!finalAnswerText && formData.question_text.trim()) {
        try {
          console.log('Generating AI answer for:', formData.question_text);
          
          const response = await fetch('http://localhost:3001/generate-answer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              question: formData.question_text.trim()
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            finalAnswerText = data.answer;
            console.log('AI generated answer:', finalAnswerText);
          } else {
            throw new Error('Failed to generate answer');
          }
        } catch (aiError) {
          console.error('Error generating AI answer:', aiError);
          showError('Could not generate answer automatically. Please provide an answer manually.');
          return;
        }
      }

      if (editingQuestion) {
        // Update existing question
        const { error } = await supabase
          .from('questions')
          .update({
            question_text: formData.question_text,
            answer_text: finalAnswerText
          })
          .eq('id', editingQuestion.id);

        if (error) throw error;
        showSuccess('Question updated successfully!');
      } else {
        // Create new question
        const { error } = await supabase
          .from('questions')
          .insert([{
            question_text: formData.question_text,
            answer_text: finalAnswerText,
            topic_id: topicId,
            order_index: questions.length + 1
          }]);

        if (error) throw error;
        showSuccess(`Question created successfully!${!formData.answer_text.trim() ? ' (Answer auto-generated by AI)' : ''}`);
      }

      // Reset form and close modal
      resetForm();
      fetchTopicAndQuestions(); // Refresh the list
    } catch (error) {
      console.error('Error saving question:', error);
      showError('Failed to save question. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const handleEdit = (question) => {
    setEditingQuestion(question);
    setFormData({
      question_text: question.question_text,
      answer_text: question.answer_text
    });
    setShowCreateModal(true);
  };

  const handleDelete = async (question) => {
    const confirmed = await confirm({
      title: 'Delete Question',
      message: `Are you sure you want to delete this question?`,
      confirmText: 'Delete',
      confirmVariant: 'danger'
    });

    if (!confirmed) return;

    // Optimistically update the UI by removing the question and re-ordering the rest
    const remainingQuestions = questions.filter(q => q.id !== question.id);
    const updates = remainingQuestions.map((q, index) => ({
      ...q,
      order_index: index + 1
    }));
    
    setQuestions(updates);

    try {
      // First, delete the question from the database
      const { error: deleteError } = await supabase
        .from('questions')
        .delete()
        .eq('id', question.id);
      
      if (deleteError) throw deleteError;

      // Then, update the order_index of the remaining questions in the database
      const { error: upsertError } = await supabase
        .from('questions')
        .upsert(updates);
      
      if (upsertError) throw upsertError;

      showSuccess('Question deleted successfully!');
      
    } catch (error) {
      console.error('Error deleting question:', error);
      showError('Failed to delete question. Please try again.');
      // If the database operation fails, revert the UI state
      fetchTopicAndQuestions();
    }
  };

  const resetForm = () => {
    setFormData({
      question_text: '',
      answer_text: ''
    });
    setEditingQuestion(null);
    setShowCreateModal(false);
  };

  const moveQuestion = async (questionId, direction) => {
    const questionIndex = questions.findIndex(q => q.id === questionId);
    if (questionIndex === -1) return;

    const newIndex = direction === 'up' ? questionIndex - 1 : questionIndex + 1;
    if (newIndex < 0 || newIndex >= questions.length) return;

    // Create a new array to hold the reordered questions
    const newQuestions = [...questions];
    const [movedQuestion] = newQuestions.splice(questionIndex, 1);
    newQuestions.splice(newIndex, 0, movedQuestion);

    // Update the order_index values in the new array
    const updates = newQuestions.map((q, index) => ({
        ...q, // Spread the entire question object to keep all its data
        order_index: index + 1
    }));
    
    // Optimistically update the UI with the new ordered questions
    setQuestions(updates);

    try {
        // Upsert all questions in the database with their new order
        const { error } = await supabase
        .from('questions')
        .upsert(updates);
        
        if (error) throw error;
        
        showSuccess('Question reordered successfully!');
        
    } catch (error) {
        console.error('Error reordering questions:', error);
        showError('Failed to reorder questions. Please try again.');
        // If the database update fails, revert the UI state
        fetchTopicAndQuestions(); 
    }
    };

  // Conditional rendering based on loading state
  if (loading) {
    return (
      <div className="container-fluid bg-stripe min-vh-100 py-5">
        <div className="container">
          <div className="text-center py-5">
            <div className="spinner-border text-primary" role="status">
              <span className="visually-hidden">Loading...</span>
            </div>
            <p className="mt-3 text-muted">Loading topics...</p>
          </div>
        </div>
      </div>
    );
  }

  // Check if topic exists after loading is complete
  if (!topic) {
    return (
      <div className="container-fluid bg-stripe min-vh-100 py-5">
        <div className="container">
          <div className="text-center">
            <div className="alert alert-danger bg-white shadow-sm border-0 rounded-3 p-4">
              <h4 className="fw-bold text-danger">Topic Not Found</h4>
              <p className="text-secondary">The specified topic does not exist. Please check the URL.</p>
              <button className="btn btn-primary" onClick={() => navigate('/admin/topics')}>
                Go to Topics
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container-fluid bg-stripe min-vh-100 py-5">
      <div className="container">
        
        {/* Header - No changes */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="d-flex justify-content-between align-items-center">
              <div>
                <h1 className="display-6 fw-bold text-dark mb-1">
                  <i className="bi bi-question-circle-fill me-2 text-primary"></i>Questions: {topic.name}
                </h1>
                <p className="text-secondary">Manage questions for this topic</p>
              </div>
              <div>
                <button 
                  className="btn btn-primary me-2"
                  onClick={() => {
                    setFormData({
                      question_text: '',
                      answer_text: ''
                    });
                    setShowCreateModal(true);
                  }}
                >
                  <i className="bi bi-plus-lg me-2"></i>Add Question
                </button>
                <button 
                  className="btn btn-outline-secondary"
                  onClick={() => navigate('/admin/topics')}
                >
                  <i className="bi bi-arrow-left me-2"></i>Back to Topics
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Conditional Content */}
        {questions.length === 0 ? (
          <div className="text-center py-5">
            <h3 className="text-muted mb-3">No questions created yet</h3>
            <p className="text-muted mb-4">Add your first question to get started!</p>
            <button 
              className="btn btn-primary btn-lg"
              onClick={() => {
                setFormData({
                  question_text: '',
                  answer_text: ''
                });
                setShowCreateModal(true);
              }}
            >
              <i className="bi bi-plus-lg me-2"></i>Add First Question
            </button>
          </div>
        ) : (
          <div className="row g-4">
            {questions.map((question, index) => (
              <div key={question.id} className="col-12" style={{
                animation: `slideInUp 0.3s ease-out ${index * 0.1}s both`
              }}>
                <div className="card border-0 shadow-sm question-card">
                  <div className="card-body p-4">
                    <div className="d-flex align-items-center">
                      
                      {/* Number and Reorder Buttons */}
                      <div className="d-flex align-items-center me-4">
                        <h4 className="fw-bold text-primary mb-0 me-3">#{question.order_index}</h4>
                        <div className="btn-group-vertical btn-group-lg">
                          <button 
                            className="btn btn-outline-secondary"
                            onClick={() => moveQuestion(question.id, 'up')}
                            disabled={index === 0}
                          >
                            <i className="bi bi-arrow-up-short"></i>
                          </button>
                          <button 
                            className="btn btn-outline-secondary"
                            onClick={() => moveQuestion(question.id, 'down')}
                            disabled={index === questions.length - 1}
                          >
                            <i className="bi bi-arrow-down-short"></i>
                          </button>
                        </div>
                      </div>

                      {/* Question Content */}
                      <div className="flex-grow-1">
                        <h5 className="fw-bold text-dark mb-2">Question:</h5>
                        <p className="lead fw-normal text-secondary mb-3">{question.question_text}</p>
                        <h5 className="fw-bold text-primary mb-1">Expected Answer:</h5>
                        <p className="fs-5 text-dark">
                          <code>{question.answer_text}</code>
                        </p>
                      </div>

                      {/* Actions */}
                      <div className="ms-auto d-flex">
                        <button 
                          className="btn btn-outline-secondary me-2"
                          onClick={() => handleEdit(question)}
                        >
                          <i className="bi bi-pencil me-1"></i>Edit
                        </button>
                        <button 
                          className="btn btn-outline-danger"
                          onClick={() => handleDelete(question)}
                        >
                          <i className="bi bi-trash me-1"></i>Delete
                        </button>
                      </div>

                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

      </div>

      {/* Create/Edit Question Modal */}
      {showCreateModal && (
        <div className="modal fade show d-block" style={{backgroundColor: 'rgba(0,0,0,0.5)'}}>
          <div className="modal-dialog modal-lg modal-dialog-centered">
            <div className="modal-content border-0 shadow-lg rounded-4">
              <div className="modal-header border-0 pb-0">
                <h5 className="modal-title fw-bold text-dark">
                  {editingQuestion ? 'Edit Question' : 'Add New Question'}
                </h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={resetForm}
                ></button>
              </div>
              <form onSubmit={handleSubmit}>
                <div className="modal-body p-4">
                  
                  {/* Question Text */}
                  <div className="mb-3">
                    <label htmlFor="questionText" className="form-label fw-semibold fs-5">Question *</label>
                    <textarea
                      className="form-control"
                      id="questionText"
                      rows="3"
                      value={formData.question_text}
                      onChange={(e) => setFormData({...formData, question_text: e.target.value})}
                      required
                      placeholder="e.g., What keyword is used to declare a variable in JavaScript?"
                    ></textarea>
                  </div>

                  {/* Answer Text */}
                  <div className="mb-3">
                    <label htmlFor="answerText" className="form-label fw-semibold fs-5">Expected Answer</label>
                    <input
                      type="text"
                      className="form-control"
                      id="answerText"
                      value={formData.answer_text}
                      onChange={(e) => setFormData({...formData, answer_text: e.target.value})}
                      placeholder="Leave blank to auto-generate with AI"
                    />
                    {formData.answer_text.trim() ? (
                      <div className="form-text fs-6">
                        Custom answer provided. Students will need to match this exactly.
                      </div>
                    ) : (
                      <div className="form-text fs-6">
                        💡 <strong>Leave blank</strong> and AI will generate the correct answer automatically.
                      </div>
                    )}
                  </div>

                </div>
                <div className="modal-footer border-0 pt-0">
                  <button 
                    type="button" 
                    className="btn btn-outline-secondary" 
                    onClick={resetForm}
                    disabled={saving}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={saving}
                  >
                    {saving ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                        {editingQuestion ? 'Updating...' : 'Add Question'}
                      </>
                    ) : (
                      editingQuestion ? 'Update Question' : 'Add Question'
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Notification System */}
      <NotificationContainer />
      <ConfirmationModal />

      {/* Custom Styles */}
      <style>{`
        .bg-stripe { background-color: #F9F9FB !important; }
        .text-primary { color: #009C6B !important; }
        .text-secondary { color: #6C757D !important; }
        .text-dark { color: #212529 !important; }
        .text-info { color: #17a2b8 !important; }
        .text-success { color: #28a745 !important; }
        .text-warning { color: #ffc107 !important; }
        .text-danger { color: #dc3545 !important; }
        .btn-primary { background-color: #009C6B !important; border-color: #009C6B !important; }
        .btn-primary:hover { background-color: #00875A !important; border-color: #00875A !important; }
        .btn-success { background-color: #28a745 !important; border-color: #28a745 !important; }
        .btn-outline-secondary { color: #6C757D !important; border-color: #E0E0E0 !important; }
        .btn-outline-secondary:hover { background-color: #E0E0E0 !important; }
        .btn-outline-primary { color: #009C6B !important; border-color: #009C6B !important; }

        .question-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        
        .question-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 15px rgba(0,0,0,0.05) !important;
        }
        
        .modal-content {
          border-radius: 1rem;
        }
        
        .form-control, .form-select {
          font-size: 1rem;
        }

        .fs-5 { font-size: 1.25rem !important; }
        .lead { font-size: 1.25rem !important; }
        .btn { font-size: 1rem !important; }
        .btn-lg { font-size: 1.25rem !important; }
        .btn-sm { font-size: 0.875rem !important; }
        .h4 { font-size: 1.5rem !important; }
        .h5 { font-size: 1.25rem !important; }
        
        @keyframes slideInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}

export default QuestionsManagement;